package steps.pool.backoffice;

import engine.Driver;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import org.junit.Assert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import pages.pool.backoffice.Dashboard;
import pages.pool.backoffice.MatchDetails;
import pages.pool.backoffice.Matches;
import steps.Hooks;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class CreateOpenTestMatch {


    private WebDriver driver;
    public static StringBuffer reportResultCreateOpenMatch = new StringBuffer();

    public CreateOpenTestMatch(Driver driver) {
        this.driver = driver.get();

    }

    String scenarioTitle = Hooks.sce;

    //reportResultCreateOpenMatch = new StringBuffer();
    @Given("I click the games header dropdown")
    public void iClickTheGamesHeaderDropdown() {

        //Click pool header button
        Dashboard page = new Dashboard(driver);
        page.clickGamesDropdown();


    }

    @And("I click matches")
    public void iClickMatches() {


        //click Matches
        Dashboard page = new Dashboard(driver);
        page.clickMatches();
    }

    @And("I click the create match button")
    public void iClickTheCreateMatchButton() {

        // create match display
        Matches page = new Matches(driver);
        page.clickCreateMatch();
    }

    String selectedSports, selectedLeague;
    @And("I input match details")
    public void iInputMatchDetails(DataTable matchDetails) {

        //get the value list from feature file
        List<List<String>> data = matchDetails.asLists(String.class);
         selectedSports = data.get(1).get(0);
         selectedLeague = data.get(1).get(1);
        String matchCountInput = data.get(1).get(2);

        //input match details
        Matches page = new Matches(driver);
        page.selectSports(selectedSports);
        page.selectLeague(selectedLeague);

        // generate date today
        DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
        Date referenceDate = new Date();
        Calendar c = Calendar.getInstance();
        c.setTime(referenceDate);
        Date currentDatePlusOne = c.getTime();
        String dateToday = dateFormat.format(currentDatePlusOne);

        page.inputDate(dateToday);

        page.inputMatchCount(matchCountInput);
    }

    @And("I click submit button")
    public void iClickSubmitButton() {

        //click submit button
        Matches page = new Matches(driver);
        page.clickSubmitBtn();
    }

    @And("I select view match details from action dropdown")
    public void iSelectViewMatchDetailsFromActionDropdown() {

        WebDriverWait wait = new WebDriverWait(driver, 10);

        //view match details
        Matches page = new Matches(driver);
        driver.navigate().refresh();
        wait.until(ExpectedConditions.elementToBeClickable(page.actionDrpdown));
        Select actionDrpDown = new Select(page.actionDrpdown);
        actionDrpDown.selectByVisibleText("View Match Details");
    }

    @And("I click open bet status")
    public void iClickOpenBetStatus() {

        //view match details
        for(String winHandle : driver.getWindowHandles()){
            driver.switchTo().window(winHandle);
        }
        MatchDetails page = new MatchDetails(driver);
        page.matchOpenButton();
    }

    @Then("match is open")
    public void matchIsOpen() {

        MatchDetails page = new MatchDetails(driver);
        String matchStatus = page.GetmatchStatus();


        // assert Match status is open
        Assert.assertEquals("OPEN", matchStatus);




        reportResultCreateOpenMatch.append("***** POOL SMOKE TESTING *****" + "%0A" +
                        "Scenario: " + scenarioTitle + "%0A" +
                        "Sports: " + selectedSports + "%0A" +
                        "league: " + selectedLeague + "%0A" +
                        "Match status: " + matchStatus);

        String testResult = ("***** POOL SMOKE TESTING *****" + "\n" +
                        "Scenario:" + scenarioTitle + "\n" +
                        "Sports:" + selectedSports + "\n" +
                        "league:" + selectedLeague + "\n" +
                        "Match status:" + matchStatus);


        System.out.println("rrrrrrrrrrrrrrrrrrrrrrrrr\n" + testResult);

        try {
            // String result = "test result";
            URL url = new URL("https://api.telegram.org/bot5325722800:AAESQyezs3QY_7JXY0ZFVn83eQExVfTgYgg/sendMessage?chat_id=-1001766036425&text=" +reportResultCreateOpenMatch);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            int status = connection.getResponseCode();
            System.out.println(status + ": " + url);

        } catch (IOException e) {
            e.printStackTrace();

        }


    }
}
